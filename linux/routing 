

# создаем vrf
echo "$VRF_name" >> /etc/iproute2/rt_tables

# прописываем маршруты внутри vrf
ip route add default via 192.168.206.1 dev eth2  table inet-table
ip route add 10.8.0.0/24 dev tun0  scope link  table inet-table
ip route add 192.168.206.0/24 dev eth2  scope link  table inet-table

# PBR для vrf 
ip rule add from 10.8.0.0/24 table inet-table
ip rule add from 192.168.206.3/32 table inet-table
ip rule add to 213.183.57.55/32 table inet-table
ip rule add to 185.61.149.228/32 table inet-table
    
# альтернатива PBR - жестко прикрепить интерфейс к VRF
ip rule add iif eth0 pref 10 lookup $VRF_name
ip rule add unreachable iif eth0 pref 11
ip route add unreachable default proto static table $VRF_name

# трафик внутри base-таблицы ходит по gw, прописаному в /etc/network/interfaces

# альтернатива - записать все в конфиг

sudo nano /etc/network/interfaces

    auto $BASE_interface
    iface $BASE_interface inet static 
    	address 10.30.1.214
    	netmask 255.255.255.0 
    	gateway 10.30.1.1
    
    auto $OVPN_interface
    iface $OVPN_interface inet static
        address 192.168.255.1
        netmask 255.255.255.0

    auto $VRF_interface
    iface $VRF_interface inet static
            address 192.168.206.3
            netmask 255.255.255.0
            #routing
        	post-up ip route add default via 192.168.206.1 dev eth2 table inet-table
		    post-up ip route add 10.8.0.0/24 dev tun0  table inet-table
		    post-up ip route add 192.168.206.0/24 dev eth2  scope link
	        #PBR policy
		    post-up ip rule add from 10.8.0.0/24 table inet-table
        	post-up ip rule add from 192.168.206.3/32 table inet-table
		    #dnscrypt rule
	    	post-up ip rule add to $DNSCRYPT_resolver/32 table inet-table
	        #post-down delete rules
	        post-down ip rule del from 10.8.0.0/24
            post-down ip rule del from 192.168.206.3/32 
            post-down ip rule del to $DNSCRYPT_resolver/32 


